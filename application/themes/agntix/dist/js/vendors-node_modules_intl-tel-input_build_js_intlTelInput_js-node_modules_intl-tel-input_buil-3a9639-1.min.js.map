{"version":3,"file":"js/vendors-node_modules_intl-tel-input_build_js_intlTelInput_js-node_modules_intl-tel-input_buil-3a9639-1.min.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,MAAM,KAA0B;AAChC;AACA,IAAI;AACJ;AACA;AACA,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,kCAAkC;AAClE;AACA;AACA;AACA;AACA;AACA,+BAA+B,4FAA4F;AAC3H;AACA;AACA;AACA,sDAAsD,kBAAkB,aAAa;;AAErkBAAkB,2BAA2B;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM;AACN;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,2BAA2B;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,YAAY;AACxB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yCAAyC;AACzC;AACA;AACA;AACA;AACA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,6CAA6C;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,kCAAkC;AAChD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA,0BAA0B,wBAAwB;AAClD;AACA,4BAA4B,qBAAqB;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,4CAA4C;AAClE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,eAAe;AAC1C;AACA;AACA;AACA;AACA,wCAAwC,oBAAoB;AAC5D;AACA;AACA;AACA;AACA,YAAY,iCAAiC;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,QAAQ,6BAA6B,QAAQ;AACnG,mCAAmC,mBAAmB;AACtD;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,YAAY,yBAAyB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,kCAAkC;AAC9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY,4CAA4C;AACxD;AACA;AACA;AACA;AACA,qBAAqB,QAAQ;AAC7B,oDAAoD,aAAa;AACjE,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC,QAAQ;AAC9C;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA,cAAc,yBAAyB;AACvC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ;AAC/B;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA,4CAA4C,wBAAwB;AACpE;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,sBAAsB;AAC5C;AACA;AACA;AACA;AACA;AACA,uBAAuB,QAAQ,SAAS,OAAO,EAAE,SAAS;AAC1D,mCAAmC,UAAU;AAC7C;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA,8EAA8E,OAAO;AACrF;AACA,sDAAsD,OAAO;AAC7D,oDAAoD,WAAW;AAC/D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,iBAAiB;AAC/B;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA,WAAW;AACX;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,8BAA8B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA,cAAc,kCAAkC;AAChD;AACA,8CAA8C,0BAA0B;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D,wCAAwC,oCAAoC;AAC5E;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,YAAY;AACZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW;AACX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA,iCAAiC,WAAW;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR,wFAAwF,MAAM,0BAA0B,OAAO;AAC/H;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,0BAA0B;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,OAAO;AAC9B;AACA,qBAAqB,OAAO;AAC5B;AACA;AACA,qBAAqB,iBAAiB,EAAE,OAAO;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,sBAAsB;AAChD;AACA;AACA;AACA;AACA;AACA;AACA,QAAQ;AACR;AACA,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sBAAsB,2BAA2B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,KAAK;AACnD;AACA;AACA;AACA;AACA,cAAc,sEAAsE;AACpF;AACA,gFAAgF;AAChF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0CAA0C,KAAK;AAC/C,0BAA0B,+BAA+B,GAAG,kCAAkC;AAC9F;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iEAAiE,kCAAkC;AACnG;AACA;AACA;AACA,gDAAgD,yBAAyB;AACzE,UAAU;AACV,+CAA+C,yBAAyB;AACxE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB,QAAQ,SAAS,KAAK;AAC1C;AACA,oBAAoB,QAAQ,SAAS,KAAK;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B,KAAK,kCAAkC;AACxgBAAgB;AAC9C;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wBAAwB,mBAAmB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA,qBAAqB,SAAS;AAC9B,QAAQ;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yBAAyB,kCAAkC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,WAAW;AACzB,0IAA0I,SAAS;AACnJ,+CAA+C,SAAS;AACxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,OAAO;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB,OAAO;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,cAAc,EAAE;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA,mBAAmB;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,CAAC;;;;;;;;;;;;;ACzzFD","sources":["webpack://theme/./node_modules/intl-tel-input/build/js/intlTelInput.js","webpack://theme/./node_modules/intl-tel-input/build/css/intlTelInput.css?5c74"],"sourcesContent":["/*\n * International Telephone Input v21.1.4\n * https://github.com/jackocnr/intl-tel-input.git\n * Licensed under the MIT license\n */\n\n// UMD\n(function(factory) {\n  if (typeof module === 'object' && module.exports) {\n    module.exports = factory();\n  } else {\n    window.intlTelInput = factory();\n  }\n}(() => {\n\nvar factoryOutput = (() => {\n  var __defProp = Object.defineProperty;\n  var __getOwnPropDesc = Object.getOwnPropertyDescriptor;\n  var __getOwnPropNames = Object.getOwnPropertyNames;\n  var __hasOwnProp = Object.prototype.hasOwnProperty;\n  var __export = (target, all) => {\n    for (var name in all)\n      __defProp(target, name, { get: all[name], enumerable: true });\n  };\n  var __copyProps = (to, from, except, desc) => {\n    if (from && typeof from === \"object\" || typeof from === \"function\") {\n      for (let key of __getOwnPropNames(from))\n        if (!__hasOwnProp.call(to, key) && key !== except)\n          __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });\n    }\n    return to;\n  };\n  var __toCommonJS = (mod) => __copyProps(__defProp({}, \"__esModule\", { value: true }), mod);\n\n  // src/js/intl-tel-input.ts\n  var intl_tel_input_exports = {};\n  __export(intl_tel_input_exports, {\n    Iti: () => Iti,\n    default: () => intl_tel_input_default\n  });\n\n  // src/js/intl-tel-input/data.ts\n  var rawCountryData = [\n    [\n      \"Afghanistan\",\n      \"af\",\n      \"93\"\n    ],\n    [\n      \"Albania\",\n      \"al\",\n      \"355\"\n    ],\n    [\n      \"Algeria\",\n      \"dz\",\n      \"213\"\n    ],\n    [\n      \"American Samoa\",\n      \"as\",\n      \"1\",\n      5,\n      [\"684\"]\n    ],\n    [\n      \"Andorra\",\n      \"ad\",\n      \"376\"\n    ],\n    [\n      \"Angola\",\n      \"ao\",\n      \"244\"\n    ],\n    [\n      \"Anguilla\",\n      \"ai\",\n      \"1\",\n      6,\n      [\"264\"]\n    ],\n    [\n      \"Antigua & Barbuda\",\n      \"ag\",\n      \"1\",\n      7,\n      [\"268\"]\n    ],\n    [\n      \"Argentina\",\n      \"ar\",\n      \"54\"\n    ],\n    [\n      \"Armenia\",\n      \"am\",\n      \"374\"\n    ],\n    [\n      \"Aruba\",\n      \"aw\",\n      \"297\"\n    ],\n    [\n      \"Ascension Island\",\n      \"ac\",\n      \"247\"\n    ],\n    [\n      \"Australia\",\n      \"au\",\n      \"61\",\n      0\n    ],\n    [\n      \"Austria\",\n      \"at\",\n      \"43\"\n    ],\n    [\n      \"Azerbaijan\",\n      \"az\",\n      \"994\"\n    ],\n    [\n      \"Bahamas\",\n      \"bs\",\n      \"1\",\n      8,\n      [\"242\"]\n    ],\n    [\n      \"Bahrain\",\n      \"bh\",\n      \"973\"\n    ],\n    [\n      \"Bangladesh\",\n      \"bd\",\n      \"880\"\n    ],\n    [\n      \"Barbados\",\n      \"bb\",\n      \"1\",\n      9,\n      [\"246\"]\n    ],\n    [\n      \"Belarus\",\n      \"by\",\n      \"375\"\n    ],\n    [\n      \"Belgium\",\n      \"be\",\n      \"32\"\n    ],\n    [\n      \"Belize\",\n      \"bz\",\n      \"501\"\n    ],\n    [\n      \"Benin\",\n      \"bj\",\n      \"229\"\n    ],\n    [\n      \"Bermuda\",\n      \"bm\",\n      \"1\",\n      10,\n      [\"441\"]\n    ],\n    [\n      \"Bhutan\",\n      \"bt\",\n      \"975\"\n    ],\n    [\n      \"Bolivia\",\n      \"bo\",\n      \"591\"\n    ],\n    [\n      \"Bosnia & Herzegovina\",\n      \"ba\",\n      \"387\"\n    ],\n    [\n      \"Botswana\",\n      \"bw\",\n      \"267\"\n    ],\n    [\n      \"Brazil\",\n      \"br\",\n      \"55\"\n    ],\n    [\n      \"British Indian Ocean Territory\",\n      \"io\",\n      \"246\"\n    ],\n    [\n      \"British Virgin Islands\",\n      \"vg\",\n      \"1\",\n      11,\n      [\"284\"]\n    ],\n    [\n      \"Brunei\",\n      \"bn\",\n      \"673\"\n    ],\n    [\n      \"Bulgaria\",\n      \"bg\",\n      \"359\"\n    ],\n    [\n      \"Burkina Faso\",\n      \"bf\",\n      \"226\"\n    ],\n    [\n      \"Burundi\",\n      \"bi\",\n      \"257\"\n    ],\n    [\n      \"Cambodia\",\n      \"kh\",\n      \"855\"\n    ],\n    [\n      \"Cameroon\",\n      \"cm\",\n      \"237\"\n    ],\n    [\n      \"Canada\",\n      \"ca\",\n      \"1\",\n      1,\n      [\"204\", \"226\", \"236\", \"249\", \"250\", \"263\", \"289\", \"306\", \"343\", \"354\", \"365\", \"367\", \"368\", \"382\", \"387\", \"403\", \"416\", \"418\", \"428\", \"431\", \"437\", \"438\", \"450\", \"584\", \"468\", \"474\", \"506\", \"514\", \"519\", \"548\", \"579\", \"581\", \"584\", \"587\", \"604\", \"613\", \"639\", \"647\", \"672\", \"683\", \"705\", \"709\", \"742\", \"753\", \"778\", \"780\", \"782\", \"807\", \"819\", \"825\", \"867\", \"873\", \"879\", \"902\", \"905\"]\n    ],\n    [\n      \"Cape Verde\",\n      \"cv\",\n      \"238\"\n    ],\n    [\n      \"Caribbean Netherlands\",\n      \"bq\",\n      \"599\",\n      1,\n      [\"3\", \"4\", \"7\"]\n    ],\n    [\n      \"Cayman Islands\",\n      \"ky\",\n      \"1\",\n      12,\n      [\"345\"]\n    ],\n    [\n      \"Central African Republic\",\n      \"cf\",\n      \"236\"\n    ],\n    [\n      \"Chad\",\n      \"td\",\n      \"235\"\n    ],\n    [\n      \"Chile\",\n      \"cl\",\n      \"56\"\n    ],\n    [\n      \"China\",\n      \"cn\",\n      \"86\"\n    ],\n    [\n      \"Christmas Island\",\n      \"cx\",\n      \"61\",\n      2,\n      [\"89164\"]\n    ],\n    [\n      \"Cocos (Keeling) Islands\",\n      \"cc\",\n      \"61\",\n      1,\n      [\"89162\"]\n    ],\n    [\n      \"Colombia\",\n      \"co\",\n      \"57\"\n    ],\n    [\n      \"Comoros\",\n      \"km\",\n      \"269\"\n    ],\n    [\n      \"Congo - Brazzaville\",\n      \"cg\",\n      \"242\"\n    ],\n    [\n      \"Congo - Kinshasa\",\n      \"cd\",\n      \"243\"\n    ],\n    [\n      \"Cook Islands\",\n      \"ck\",\n      \"682\"\n    ],\n    [\n      \"Costa Rica\",\n      \"cr\",\n      \"506\"\n    ],\n    [\n      \"C\\xF4te d\\u2019Ivoire\",\n      \"ci\",\n      \"225\"\n    ],\n    [\n      \"Croatia\",\n      \"hr\",\n      \"385\"\n    ],\n    [\n      \"Cuba\",\n      \"cu\",\n      \"53\"\n    ],\n    [\n      \"Cura\\xE7ao\",\n      \"cw\",\n      \"599\",\n      0\n    ],\n    [\n      \"Cyprus\",\n      \"cy\",\n      \"357\"\n    ],\n    [\n      \"Czech Republic\",\n      \"cz\",\n      \"420\"\n    ],\n    [\n      \"Denmark\",\n      \"dk\",\n      \"45\"\n    ],\n    [\n      \"Djibouti\",\n      \"dj\",\n      \"253\"\n    ],\n    [\n      \"Dominica\",\n      \"dm\",\n      \"1\",\n      13,\n      [\"767\"]\n    ],\n    [\n      \"Dominican Republic\",\n      \"do\",\n      \"1\",\n      2,\n      [\"809\", \"829\", \"849\"]\n    ],\n    [\n      \"Ecuador\",\n      \"ec\",\n      \"593\"\n    ],\n    [\n      \"Egypt\",\n      \"eg\",\n      \"20\"\n    ],\n    [\n      \"El Salvador\",\n      \"sv\",\n      \"503\"\n    ],\n    [\n      \"Equatorial Guinea\",\n      \"gq\",\n      \"240\"\n    ],\n    [\n      \"Eritrea\",\n      \"er\",\n      \"291\"\n    ],\n    [\n      \"Estonia\",\n      \"ee\",\n      \"372\"\n    ],\n    [\n      \"Eswatini\",\n      \"sz\",\n      \"268\"\n    ],\n    [\n      \"Ethiopia\",\n      \"et\",\n      \"251\"\n    ],\n    [\n      \"Falkland Islands\",\n      \"fk\",\n      \"500\"\n    ],\n    [\n      \"Faroe Islands\",\n      \"fo\",\n      \"298\"\n    ],\n    [\n      \"Fiji\",\n      \"fj\",\n      \"679\"\n    ],\n    [\n      \"Finland\",\n      \"fi\",\n      \"358\",\n      0\n    ],\n    [\n      \"France\",\n      \"fr\",\n      \"33\"\n    ],\n    [\n      \"French Guiana\",\n      \"gf\",\n      \"594\"\n    ],\n    [\n      \"French Polynesia\",\n      \"pf\",\n      \"689\"\n    ],\n    [\n      \"Gabon\",\n      \"ga\",\n      \"241\"\n    ],\n    [\n      \"Gambia\",\n      \"gm\",\n      \"220\"\n    ],\n    [\n      \"Georgia\",\n      \"ge\",\n      \"995\"\n    ],\n    [\n      \"Germany\",\n      \"de\",\n      \"49\"\n    ],\n    [\n      \"Ghana\",\n      \"gh\",\n      \"233\"\n    ],\n    [\n      \"Gibraltar\",\n      \"gi\",\n      \"350\"\n    ],\n    [\n      \"Greece\",\n      \"gr\",\n      \"30\"\n    ],\n    [\n      \"Greenland\",\n      \"gl\",\n      \"299\"\n    ],\n    [\n      \"Grenada\",\n      \"gd\",\n      \"1\",\n      14,\n      [\"473\"]\n    ],\n    [\n      \"Guadeloupe\",\n      \"gp\",\n      \"590\",\n      0\n    ],\n    [\n      \"Guam\",\n      \"gu\",\n      \"1\",\n      15,\n      [\"671\"]\n    ],\n    [\n      \"Guatemala\",\n      \"gt\",\n      \"502\"\n    ],\n    [\n      \"Guernsey\",\n      \"gg\",\n      \"44\",\n      1,\n      [\"1481\", \"7781\", \"7839\", \"7911\"]\n    ],\n    [\n      \"Guinea\",\n      \"gn\",\n      \"224\"\n    ],\n    [\n      \"Guinea-Bissau\",\n      \"gw\",\n      \"245\"\n    ],\n    [\n      \"Guyana\",\n      \"gy\",\n      \"592\"\n    ],\n    [\n      \"Haiti\",\n      \"ht\",\n      \"509\"\n    ],\n    [\n      \"Honduras\",\n      \"hn\",\n      \"504\"\n    ],\n    [\n      \"Hong Kong\",\n      \"hk\",\n      \"852\"\n    ],\n    [\n      \"Hungary\",\n      \"hu\",\n      \"36\"\n    ],\n    [\n      \"Iceland\",\n      \"is\",\n      \"354\"\n    ],\n    [\n      \"India\",\n      \"in\",\n      \"91\"\n    ],\n    [\n      \"Indonesia\",\n      \"id\",\n      \"62\"\n    ],\n    [\n      \"Iran\",\n      \"ir\",\n      \"98\"\n    ],\n    [\n      \"Iraq\",\n      \"iq\",\n      \"964\"\n    ],\n    [\n      \"Ireland\",\n      \"ie\",\n      \"353\"\n    ],\n    [\n      \"Isle of Man\",\n      \"im\",\n      \"44\",\n      2,\n      [\"1624\", \"74576\", \"7524\", \"7924\", \"7624\"]\n    ],\n    [\n      \"Israel\",\n      \"il\",\n      \"972\"\n    ],\n    [\n      \"Italy\",\n      \"it\",\n      \"39\",\n      0\n    ],\n    [\n      \"Jamaica\",\n      \"jm\",\n      \"1\",\n      4,\n      [\"876\", \"658\"]\n    ],\n    [\n      \"Japan\",\n      \"jp\",\n      \"81\"\n    ],\n    [\n      \"Jersey\",\n      \"je\",\n      \"44\",\n      3,\n      [\"1534\", \"7509\", \"7700\", \"7797\", \"7829\", \"7937\"]\n    ],\n    [\n      \"Jordan\",\n      \"jo\",\n      \"962\"\n    ],\n    [\n      \"Kazakhstan\",\n      \"kz\",\n      \"7\",\n      1,\n      [\"33\", \"7\"]\n    ],\n    [\n      \"Kenya\",\n      \"ke\",\n      \"254\"\n    ],\n    [\n      \"Kiribati\",\n      \"ki\",\n      \"686\"\n    ],\n    [\n      \"Kosovo\",\n      \"xk\",\n      \"383\"\n    ],\n    [\n      \"Kuwait\",\n      \"kw\",\n      \"965\"\n    ],\n    [\n      \"Kyrgyzstan\",\n      \"kg\",\n      \"996\"\n    ],\n    [\n      \"Laos\",\n      \"la\",\n      \"856\"\n    ],\n    [\n      \"Latvia\",\n      \"lv\",\n      \"371\"\n    ],\n    [\n      \"Lebanon\",\n      \"lb\",\n      \"961\"\n    ],\n    [\n      \"Lesotho\",\n      \"ls\",\n      \"266\"\n    ],\n    [\n      \"Liberia\",\n      \"lr\",\n      \"231\"\n    ],\n    [\n      \"Libya\",\n      \"ly\",\n      \"218\"\n    ],\n    [\n      \"Liechtenstein\",\n      \"li\",\n      \"423\"\n    ],\n    [\n      \"Lithuania\",\n      \"lt\",\n      \"370\"\n    ],\n    [\n      \"Luxembourg\",\n      \"lu\",\n      \"352\"\n    ],\n    [\n      \"Macau\",\n      \"mo\",\n      \"853\"\n    ],\n    [\n      \"Madagascar\",\n      \"mg\",\n      \"261\"\n    ],\n    [\n      \"Malawi\",\n      \"mw\",\n      \"265\"\n    ],\n    [\n      \"Malaysia\",\n      \"my\",\n      \"60\"\n    ],\n    [\n      \"Maldives\",\n      \"mv\",\n      \"960\"\n    ],\n    [\n      \"Mali\",\n      \"ml\",\n      \"223\"\n    ],\n    [\n      \"Malta\",\n      \"mt\",\n      \"356\"\n    ],\n    [\n      \"Marshall Islands\",\n      \"mh\",\n      \"692\"\n    ],\n    [\n      \"Martinique\",\n      \"mq\",\n      \"596\"\n    ],\n    [\n      \"Mauritania\",\n      \"mr\",\n      \"222\"\n    ],\n    [\n      \"Mauritius\",\n      \"mu\",\n      \"230\"\n    ],\n    [\n      \"Mayotte\",\n      \"yt\",\n      \"262\",\n      1,\n      [\"269\", \"639\"]\n    ],\n    [\n      \"Mexico\",\n      \"mx\",\n      \"52\"\n    ],\n    [\n      \"Micronesia\",\n      \"fm\",\n      \"691\"\n    ],\n    [\n      \"Moldova\",\n      \"md\",\n      \"373\"\n    ],\n    [\n      \"Monaco\",\n      \"mc\",\n      \"377\"\n    ],\n    [\n      \"Mongolia\",\n      \"mn\",\n      \"976\"\n    ],\n    [\n      \"Montenegro\",\n      \"me\",\n      \"382\"\n    ],\n    [\n      \"Montserrat\",\n      \"ms\",\n      \"1\",\n      16,\n      [\"664\"]\n    ],\n    [\n      \"Morocco\",\n      \"ma\",\n      \"212\",\n      0\n    ],\n    [\n      \"Mozambique\",\n      \"mz\",\n      \"258\"\n    ],\n    [\n      \"Myanmar (Burma)\",\n      \"mm\",\n      \"95\"\n    ],\n    [\n      \"Namibia\",\n      \"na\",\n      \"264\"\n    ],\n    [\n      \"Nauru\",\n      \"nr\",\n      \"674\"\n    ],\n    [\n      \"Nepal\",\n      \"np\",\n      \"977\"\n    ],\n    [\n      \"Netherlands\",\n      \"nl\",\n      \"31\"\n    ],\n    [\n      \"New Caledonia\",\n      \"nc\",\n      \"687\"\n    ],\n    [\n      \"New Zealand\",\n      \"nz\",\n      \"64\"\n    ],\n    [\n      \"Nicaragua\",\n      \"ni\",\n      \"505\"\n    ],\n    [\n      \"Niger\",\n      \"ne\",\n      \"227\"\n    ],\n    [\n      \"Nigeria\",\n      \"ng\",\n      \"234\"\n    ],\n    [\n      \"Niue\",\n      \"nu\",\n      \"683\"\n    ],\n    [\n      \"Norfolk Island\",\n      \"nf\",\n      \"672\"\n    ],\n    [\n      \"North Korea\",\n      \"kp\",\n      \"850\"\n    ],\n    [\n      \"North Macedonia\",\n      \"mk\",\n      \"389\"\n    ],\n    [\n      \"Northern Mariana Islands\",\n      \"mp\",\n      \"1\",\n      17,\n      [\"670\"]\n    ],\n    [\n      \"Norway\",\n      \"no\",\n      \"47\",\n      0\n    ],\n    [\n      \"Oman\",\n      \"om\",\n      \"968\"\n    ],\n    [\n      \"Pakistan\",\n      \"pk\",\n      \"92\"\n    ],\n    [\n      \"Palau\",\n      \"pw\",\n      \"680\"\n    ],\n    [\n      \"Palestine\",\n      \"ps\",\n      \"970\"\n    ],\n    [\n      \"Panama\",\n      \"pa\",\n      \"507\"\n    ],\n    [\n      \"Papua New Guinea\",\n      \"pg\",\n      \"675\"\n    ],\n    [\n      \"Paraguay\",\n      \"py\",\n      \"595\"\n    ],\n    [\n      \"Peru\",\n      \"pe\",\n      \"51\"\n    ],\n    [\n      \"Philippines\",\n      \"ph\",\n      \"63\"\n    ],\n    [\n      \"Poland\",\n      \"pl\",\n      \"48\"\n    ],\n    [\n      \"Portugal\",\n      \"pt\",\n      \"351\"\n    ],\n    [\n      \"Puerto Rico\",\n      \"pr\",\n      \"1\",\n      3,\n      [\"787\", \"939\"]\n    ],\n    [\n      \"Qatar\",\n      \"qa\",\n      \"974\"\n    ],\n    [\n      \"R\\xE9union\",\n      \"re\",\n      \"262\",\n      0\n    ],\n    [\n      \"Romania\",\n      \"ro\",\n      \"40\"\n    ],\n    [\n      \"Russia\",\n      \"ru\",\n      \"7\",\n      0\n    ],\n    [\n      \"Rwanda\",\n      \"rw\",\n      \"250\"\n    ],\n    [\n      \"Samoa\",\n      \"ws\",\n      \"685\"\n    ],\n    [\n      \"San Marino\",\n      \"sm\",\n      \"378\"\n    ],\n    [\n      \"S\\xE3o Tom\\xE9 & Pr\\xEDncipe\",\n      \"st\",\n      \"239\"\n    ],\n    [\n      \"Saudi Arabia\",\n      \"sa\",\n      \"966\"\n    ],\n    [\n      \"Senegal\",\n      \"sn\",\n      \"221\"\n    ],\n    [\n      \"Serbia\",\n      \"rs\",\n      \"381\"\n    ],\n    [\n      \"Seychelles\",\n      \"sc\",\n      \"248\"\n    ],\n    [\n      \"Sierra Leone\",\n      \"sl\",\n      \"232\"\n    ],\n    [\n      \"Singapore\",\n      \"sg\",\n      \"65\"\n    ],\n    [\n      \"Sint Maarten\",\n      \"sx\",\n      \"1\",\n      21,\n      [\"721\"]\n    ],\n    [\n      \"Slovakia\",\n      \"sk\",\n      \"421\"\n    ],\n    [\n      \"Slovenia\",\n      \"si\",\n      \"386\"\n    ],\n    [\n      \"Solomon Islands\",\n      \"sb\",\n      \"677\"\n    ],\n    [\n      \"Somalia\",\n      \"so\",\n      \"252\"\n    ],\n    [\n      \"South Africa\",\n      \"za\",\n      \"27\"\n    ],\n    [\n      \"South Korea\",\n      \"kr\",\n      \"82\"\n    ],\n    [\n      \"South Sudan\",\n      \"ss\",\n      \"211\"\n    ],\n    [\n      \"Spain\",\n      \"es\",\n      \"34\"\n    ],\n    [\n      \"Sri Lanka\",\n      \"lk\",\n      \"94\"\n    ],\n    [\n      \"St Barth\\xE9lemy\",\n      \"bl\",\n      \"590\",\n      1\n    ],\n    [\n      \"St Helena\",\n      \"sh\",\n      \"290\"\n    ],\n    [\n      \"St Kitts & Nevis\",\n      \"kn\",\n      \"1\",\n      18,\n      [\"869\"]\n    ],\n    [\n      \"St Lucia\",\n      \"lc\",\n      \"1\",\n      19,\n      [\"758\"]\n    ],\n    [\n      \"St Martin\",\n      \"mf\",\n      \"590\",\n      2\n    ],\n    [\n      \"St Pierre & Miquelon\",\n      \"pm\",\n      \"508\"\n    ],\n    [\n      \"St Vincent & Grenadines\",\n      \"vc\",\n      \"1\",\n      20,\n      [\"784\"]\n    ],\n    [\n      \"Sudan\",\n      \"sd\",\n      \"249\"\n    ],\n    [\n      \"Suriname\",\n      \"sr\",\n      \"597\"\n    ],\n    [\n      \"Svalbard & Jan Mayen\",\n      \"sj\",\n      \"47\",\n      1,\n      [\"79\"]\n    ],\n    [\n      \"Sweden\",\n      \"se\",\n      \"46\"\n    ],\n    [\n      \"Switzerland\",\n      \"ch\",\n      \"41\"\n    ],\n    [\n      \"Syria\",\n      \"sy\",\n      \"963\"\n    ],\n    [\n      \"Taiwan\",\n      \"tw\",\n      \"886\"\n    ],\n    [\n      \"Tajikistan\",\n      \"tj\",\n      \"992\"\n    ],\n    [\n      \"Tanzania\",\n      \"tz\",\n      \"255\"\n    ],\n    [\n      \"Thailand\",\n      \"th\",\n      \"66\"\n    ],\n    [\n      \"Timor-Leste\",\n      \"tl\",\n      \"670\"\n    ],\n    [\n      \"Togo\",\n      \"tg\",\n      \"228\"\n    ],\n    [\n      \"Tokelau\",\n      \"tk\",\n      \"690\"\n    ],\n    [\n      \"Tonga\",\n      \"to\",\n      \"676\"\n    ],\n    [\n      \"Trinidad & Tobago\",\n      \"tt\",\n      \"1\",\n      22,\n      [\"868\"]\n    ],\n    [\n      \"Tunisia\",\n      \"tn\",\n      \"216\"\n    ],\n    [\n      \"Turkey\",\n      \"tr\",\n      \"90\"\n    ],\n    [\n      \"Turkmenistan\",\n      \"tm\",\n      \"993\"\n    ],\n    [\n      \"Turks & Caicos Islands\",\n      \"tc\",\n      \"1\",\n      23,\n      [\"649\"]\n    ],\n    [\n      \"Tuvalu\",\n      \"tv\",\n      \"688\"\n    ],\n    [\n      \"Uganda\",\n      \"ug\",\n      \"256\"\n    ],\n    [\n      \"Ukraine\",\n      \"ua\",\n      \"380\"\n    ],\n    [\n      \"United Arab Emirates\",\n      \"ae\",\n      \"971\"\n    ],\n    [\n      \"United Kingdom\",\n      \"gb\",\n      \"44\",\n      0\n    ],\n    [\n      \"United States\",\n      \"us\",\n      \"1\",\n      0\n    ],\n    [\n      \"Uruguay\",\n      \"uy\",\n      \"598\"\n    ],\n    [\n      \"US Virgin Islands\",\n      \"vi\",\n      \"1\",\n      24,\n      [\"340\"]\n    ],\n    [\n      \"Uzbekistan\",\n      \"uz\",\n      \"998\"\n    ],\n    [\n      \"Vanuatu\",\n      \"vu\",\n      \"678\"\n    ],\n    [\n      \"Vatican City\",\n      \"va\",\n      \"39\",\n      1,\n      [\"06698\"]\n    ],\n    [\n      \"Venezuela\",\n      \"ve\",\n      \"58\"\n    ],\n    [\n      \"Vietnam\",\n      \"vn\",\n      \"84\"\n    ],\n    [\n      \"Wallis & Futuna\",\n      \"wf\",\n      \"681\"\n    ],\n    [\n      \"Western Sahara\",\n      \"eh\",\n      \"212\",\n      1,\n      [\"5288\", \"5289\"]\n    ],\n    [\n      \"Yemen\",\n      \"ye\",\n      \"967\"\n    ],\n    [\n      \"Zambia\",\n      \"zm\",\n      \"260\"\n    ],\n    [\n      \"Zimbabwe\",\n      \"zw\",\n      \"263\"\n    ],\n    [\n      \"\\xC5land Islands\",\n      \"ax\",\n      \"358\",\n      1,\n      [\"18\"]\n    ]\n  ];\n  var allCountries = [];\n  for (let i = 0; i < rawCountryData.length; i++) {\n    const c = rawCountryData[i];\n    allCountries[i] = {\n      name: c[0],\n      iso2: c[1],\n      dialCode: c[2],\n      priority: c[3] || 0,\n      areaCodes: c[4] || null,\n      nodeById: {}\n    };\n  }\n  var data_default = allCountries;\n\n  // src/js/intl-tel-input.ts\n  var id = 0;\n  var defaults = {\n    //* Whether or not to allow the dropdown.\n    allowDropdown: true,\n    //* Add a placeholder in the input with an example number for the selected country.\n    autoPlaceholder: \"polite\",\n    //* Add a country search input at the top of the dropdown.\n    countrySearch: true,\n    //* Modify the parentClass.\n    containerClass: \"\",\n    //* Modify the auto placeholder.\n    customPlaceholder: null,\n    //* Append menu to specified element.\n    dropdownContainer: null,\n    //* Don't display these countries.\n    excludeCountries: [],\n    //* Fix the dropdown width to the input width (rather than being as wide as the longest country name).\n    fixDropdownWidth: true,\n    //* Format the number as the user types\n    formatAsYouType: true,\n    //* Format the input value during initialisation and on setNumber.\n    formatOnDisplay: true,\n    //* geoIp lookup function.\n    geoIpLookup: null,\n    //* Inject a hidden input with the name returned from this function, and on submit, populate it with the result of getNumber.\n    hiddenInput: null,\n    //* Internationalise the plugin text e.g. search input placeholder, country names.\n    i18n: {},\n    //* Initial country.\n    initialCountry: \"\",\n    //* National vs international formatting for numbers e.g. placeholders and displaying existing numbers.\n    nationalMode: true,\n    //* Display only these countries.\n    onlyCountries: [],\n    //* Number type to use for placeholders.\n    placeholderNumberType: \"MOBILE\",\n    //* The countries at the top of the list.\n    preferredCountries: [],\n    //* Option to hide the flags - must be used with showSelectedDialCode, or allowDropdown=false.\n    showFlags: true,\n    //* Display the international dial code next to the selected flag.\n    showSelectedDialCode: false,\n    //* Only allow certain chars e.g. a plus followed by numeric digits, and cap at max valid length.\n    strictMode: false,\n    //* Use full screen popup instead of dropdown for country list.\n    useFullscreenPopup: typeof navigator !== \"undefined\" && typeof window !== \"undefined\" ? (\n      //* We cannot just test screen size as some smartphones/website meta tags will report desktop resolutions.\n      //* Note: to target Android Mobiles (and not Tablets), we must find 'Android' and 'Mobile'\n      /Android.+Mobile|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(\n        navigator.userAgent\n      ) || window.innerWidth <= 500\n    ) : false,\n    //* Specify the path to the libphonenumber script to enable validation/formatting.\n    utilsScript: \"\"\n  };\n  var regionlessNanpNumbers = [\n    \"800\",\n    \"822\",\n    \"833\",\n    \"844\",\n    \"855\",\n    \"866\",\n    \"877\",\n    \"880\",\n    \"881\",\n    \"882\",\n    \"883\",\n    \"884\",\n    \"885\",\n    \"886\",\n    \"887\",\n    \"888\",\n    \"889\"\n  ];\n  var getNumeric = (s) => s.replace(/\\D/g, \"\");\n  var normaliseString = (s = \"\") => s.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\").toLowerCase();\n  var toggleClass = (el, className, shouldHaveClass) => {\n    if (shouldHaveClass && !el.classList.contains(className)) {\n      el.classList.add(className);\n    } else if (!shouldHaveClass && el.classList.contains(className)) {\n      el.classList.remove(className);\n    }\n  };\n  var isRegionlessNanp = (number) => {\n    const numeric = getNumeric(number);\n    if (numeric.charAt(0) === \"1\") {\n      const areaCode = numeric.substr(1, 3);\n      return regionlessNanpNumbers.indexOf(areaCode) !== -1;\n    }\n    return false;\n  };\n  var countryNameSort = (a, b) => {\n    if (a.name < b.name) {\n      return -1;\n    }\n    if (a.name > b.name) {\n      return 1;\n    }\n    return 0;\n  };\n  var translateCursorPosition = (relevantChars, formattedValue, prevCaretPos, isDeleteForwards) => {\n    if (prevCaretPos === 0 && !isDeleteForwards) {\n      return 0;\n    }\n    let count = 0;\n    for (let i = 0; i < formattedValue.length; i++) {\n      if (/[+0-9]/.test(formattedValue[i])) {\n        count++;\n      }\n      if (count === relevantChars && !isDeleteForwards) {\n        return i + 1;\n      }\n      if (isDeleteForwards && count === relevantChars + 1) {\n        return i;\n      }\n    }\n    return formattedValue.length;\n  };\n  var createEl = (name, attrs, container) => {\n    const el = document.createElement(name);\n    if (attrs) {\n      Object.entries(attrs).forEach(([key, value]) => el.setAttribute(key, value));\n    }\n    if (container) {\n      container.appendChild(el);\n    }\n    return el;\n  };\n  var forEachInstance = (method) => {\n    const { instances } = window.intlTelInputGlobals;\n    Object.values(instances).forEach((instance) => instance[method]());\n  };\n  var Iti = class {\n    //* Can't be private as it's called from intlTelInput convenience wrapper.\n    id;\n    //* NOT Private\n    promise;\n    //* Private\n    telInput;\n    activeItem;\n    highlightedItem;\n    options;\n    hadInitialPlaceholder;\n    isRTL;\n    selectedCountryData;\n    countries;\n    dialCodeMaxLen;\n    dialCodeToIso2Map;\n    dialCodes;\n    preferredCountries;\n    countryContainer;\n    selectedCountry;\n    selectedCountryInner;\n    selectedCountryA11yText;\n    selectedDialCode;\n    dropdownArrow;\n    dropdownContent;\n    searchInput;\n    searchResultsA11yText;\n    countryList;\n    dropdown;\n    hiddenInput;\n    hiddenInputCountry;\n    maxCoreNumberLength;\n    defaultCountry;\n    _handleHiddenInputSubmit;\n    _handleLabelClick;\n    _handleClickSelectedCountry;\n    _handleCountryContainerKeydown;\n    _handleInputEvent;\n    _handleKeydownEvent;\n    _handleWindowScroll;\n    _handleMouseoverCountryList;\n    _handleClickCountryList;\n    _handleClickOffToClose;\n    _handleKeydownOnDropdown;\n    _handleSearchChange;\n    resolveAutoCountryPromise;\n    rejectAutoCountryPromise;\n    resolveUtilsScriptPromise;\n    rejectUtilsScriptPromise;\n    constructor(input, customOptions = {}) {\n      this.id = id++;\n      this.telInput = input;\n      this.activeItem = null;\n      this.highlightedItem = null;\n      this.options = Object.assign({}, defaults, customOptions);\n      this.hadInitialPlaceholder = Boolean(input.getAttribute(\"placeholder\"));\n    }\n    //* Can't be private as it's called from intlTelInput convenience wrapper.\n    _init() {\n      if (this.options.useFullscreenPopup) {\n        this.options.fixDropdownWidth = false;\n      }\n      if (this.options.countrySearch && !this.options.useFullscreenPopup) {\n        this.options.fixDropdownWidth = true;\n      }\n      const forceShowFlags = this.options.allowDropdown && !this.options.showSelectedDialCode;\n      if (!this.options.showFlags && forceShowFlags) {\n        this.options.showFlags = true;\n      }\n      if (this.options.useFullscreenPopup && !this.options.dropdownContainer) {\n        this.options.dropdownContainer = document.body;\n      }\n      this.isRTL = !!this.telInput.closest(\"[dir=rtl]\");\n      const autoCountryPromise = new Promise((resolve, reject) => {\n        this.resolveAutoCountryPromise = resolve;\n        this.rejectAutoCountryPromise = reject;\n      });\n      const utilsScriptPromise = new Promise((resolve, reject) => {\n        this.resolveUtilsScriptPromise = resolve;\n        this.rejectUtilsScriptPromise = reject;\n      });\n      this.promise = Promise.all([autoCountryPromise, utilsScriptPromise]);\n      this.selectedCountryData = {};\n      this._processCountryData();\n      this._generateMarkup();\n      this._setInitialState();\n      this._initListeners();\n      this._initRequests();\n    }\n    //********************\n    //*  PRIVATE METHODS\n    //********************\n    //* Prepare all of the country data, including onlyCountries, excludeCountries and preferredCountries options.\n    _processCountryData() {\n      this._processAllCountries();\n      this._processDialCodes();\n      this._processPreferredCountries();\n      this._translateCountryNames();\n      if (this.options.onlyCountries.length || this.options.i18n) {\n        this.countries.sort(countryNameSort);\n      }\n    }\n    //* Add a dial code to this.dialCodeToIso2Map.\n    _addToDialCodeMap(iso2, dialCode, priority) {\n      if (dialCode.length > this.dialCodeMaxLen) {\n        this.dialCodeMaxLen = dialCode.length;\n      }\n      if (!this.dialCodeToIso2Map.hasOwnProperty(dialCode)) {\n        this.dialCodeToIso2Map[dialCode] = [];\n      }\n      for (let i = 0; i < this.dialCodeToIso2Map[dialCode].length; i++) {\n        if (this.dialCodeToIso2Map[dialCode][i] === iso2) {\n          return;\n        }\n      }\n      const index = priority !== void 0 ? priority : this.dialCodeToIso2Map[dialCode].length;\n      this.dialCodeToIso2Map[dialCode][index] = iso2;\n    }\n    //* Process onlyCountries or excludeCountries array if present.\n    _processAllCountries() {\n      const { onlyCountries, excludeCountries } = this.options;\n      if (onlyCountries.length) {\n        const lowerCaseOnlyCountries = onlyCountries.map(\n          (country) => country.toLowerCase()\n        );\n        this.countries = data_default.filter(\n          (country) => lowerCaseOnlyCountries.indexOf(country.iso2) > -1\n        );\n      } else if (excludeCountries.length) {\n        const lowerCaseExcludeCountries = excludeCountries.map(\n          (country) => country.toLowerCase()\n        );\n        this.countries = data_default.filter(\n          (country) => lowerCaseExcludeCountries.indexOf(country.iso2) === -1\n        );\n      } else {\n        this.countries = data_default;\n      }\n    }\n    //* Translate Countries by object literal provided on config.\n    _translateCountryNames() {\n      for (let i = 0; i < this.countries.length; i++) {\n        const iso2 = this.countries[i].iso2.toLowerCase();\n        if (this.options.i18n.hasOwnProperty(iso2)) {\n          this.countries[i].name = this.options.i18n[iso2];\n        }\n      }\n    }\n    //* Generate this.dialCodes and this.dialCodeToIso2Map.\n    _processDialCodes() {\n      this.dialCodes = {};\n      this.dialCodeMaxLen = 0;\n      this.dialCodeToIso2Map = {};\n      for (let i = 0; i < this.countries.length; i++) {\n        const c = this.countries[i];\n        if (!this.dialCodes[c.dialCode]) {\n          this.dialCodes[c.dialCode] = true;\n        }\n        this._addToDialCodeMap(c.iso2, c.dialCode, c.priority);\n      }\n      for (let i = 0; i < this.countries.length; i++) {\n        const c = this.countries[i];\n        if (c.areaCodes) {\n          const rootIso2Code = this.dialCodeToIso2Map[c.dialCode][0];\n          for (let j = 0; j < c.areaCodes.length; j++) {\n            const areaCode = c.areaCodes[j];\n            for (let k = 1; k < areaCode.length; k++) {\n              const partialDialCode = c.dialCode + areaCode.substr(0, k);\n              this._addToDialCodeMap(rootIso2Code, partialDialCode);\n              this._addToDialCodeMap(c.iso2, partialDialCode);\n            }\n            this._addToDialCodeMap(c.iso2, c.dialCode + areaCode);\n          }\n        }\n      }\n    }\n    //* Process preferred countries - iterate through the preferences, fetching the country data for each one.\n    _processPreferredCountries() {\n      this.preferredCountries = [];\n      for (let i = 0; i < this.options.preferredCountries.length; i++) {\n        const iso2 = this.options.preferredCountries[i].toLowerCase();\n        const countryData = this._getCountryData(iso2, true);\n        if (countryData) {\n          this.preferredCountries.push(countryData);\n        }\n      }\n    }\n    //* Generate all of the markup for the plugin: the selected country overlay, and the dropdown.\n    _generateMarkup() {\n      this.telInput.classList.add(\"iti__tel-input\");\n      if (!this.telInput.hasAttribute(\"autocomplete\") && !(this.telInput.form && this.telInput.form.hasAttribute(\"autocomplete\"))) {\n        this.telInput.setAttribute(\"autocomplete\", \"off\");\n      }\n      const {\n        allowDropdown,\n        showSelectedDialCode,\n        showFlags,\n        containerClass,\n        hiddenInput,\n        dropdownContainer,\n        fixDropdownWidth,\n        useFullscreenPopup,\n        countrySearch,\n        i18n\n      } = this.options;\n      let parentClass = \"iti\";\n      if (allowDropdown) {\n        parentClass += \" iti--allow-dropdown\";\n      }\n      if (showSelectedDialCode) {\n        parentClass += \" iti--show-selected-dial-code\";\n      }\n      if (showFlags) {\n        parentClass += \" iti--show-flags\";\n      }\n      if (containerClass) {\n        parentClass += ` ${containerClass}`;\n      }\n      if (!useFullscreenPopup) {\n        parentClass += \" iti--inline-dropdown\";\n      }\n      const wrapper = createEl(\"div\", { class: parentClass });\n      this.telInput.parentNode?.insertBefore(wrapper, this.telInput);\n      if (showFlags || showSelectedDialCode) {\n        this.countryContainer = createEl(\n          \"div\",\n          { class: \"iti__country-container\" },\n          wrapper\n        );\n        this.selectedCountry = createEl(\n          \"button\",\n          {\n            type: \"button\",\n            class: \"iti__selected-country\",\n            ...allowDropdown && {\n              \"aria-expanded\": \"false\",\n              \"aria-label\": this.options.i18n.selectedCountryAriaLabel || \"Selected country\",\n              \"aria-haspopup\": countrySearch ? \"true\" : \"listbox\",\n              \"aria-controls\": countrySearch ? `iti-${this.id}__dropdown-content` : `iti-${this.id}__country-listbox`,\n              ...countrySearch ? { role: \"combobox\" } : {}\n            }\n          },\n          this.countryContainer\n        );\n        this.selectedCountryInner = createEl(\"div\", null, this.selectedCountry);\n        this.selectedCountryA11yText = createEl(\n          \"span\",\n          { class: \"iti__a11y-text\" },\n          this.selectedCountryInner\n        );\n      }\n      wrapper.appendChild(this.telInput);\n      if (this.selectedCountry && this.telInput.disabled) {\n        this.selectedCountry.setAttribute(\"aria-disabled\", \"true\");\n      }\n      if (showSelectedDialCode) {\n        this.selectedDialCode = createEl(\n          \"div\",\n          { class: \"iti__selected-dial-code\" },\n          this.selectedCountry\n        );\n      }\n      if (allowDropdown) {\n        if (!this.telInput.disabled) {\n          this.selectedCountry.setAttribute(\"tabindex\", \"0\");\n        }\n        this.dropdownArrow = createEl(\n          \"div\",\n          { class: \"iti__arrow\", \"aria-hidden\": \"true\" },\n          this.selectedCountry\n        );\n        const extraClasses = fixDropdownWidth ? \"\" : \"iti--flexible-dropdown-width\";\n        this.dropdownContent = createEl(\"div\", {\n          id: `iti-${this.id}__dropdown-content`,\n          class: `iti__dropdown-content iti__hide ${extraClasses}`\n        });\n        if (countrySearch) {\n          this.searchInput = createEl(\n            \"input\",\n            {\n              type: \"text\",\n              class: \"iti__search-input\",\n              placeholder: i18n.searchPlaceholder || \"Search\",\n              role: \"combobox\",\n              \"aria-expanded\": \"true\",\n              \"aria-label\": i18n.searchPlaceholder || \"Search\",\n              \"aria-controls\": `iti-${this.id}__country-listbox`,\n              \"aria-autocomplete\": \"list\",\n              \"autocomplete\": \"off\"\n            },\n            this.dropdownContent\n          );\n          this.searchResultsA11yText = createEl(\n            \"span\",\n            { class: \"iti__a11y-text\" },\n            this.dropdownContent\n          );\n        }\n        this.countryList = createEl(\n          \"ul\",\n          {\n            class: \"iti__country-list\",\n            id: `iti-${this.id}__country-listbox`,\n            role: \"listbox\",\n            \"aria-label\": i18n.countryListAriaLabel || \"List of countries\"\n          },\n          this.dropdownContent\n        );\n        if (this.preferredCountries.length && !countrySearch) {\n          this._appendListItems(this.preferredCountries, \"iti__preferred\", true);\n          createEl(\n            \"li\",\n            {\n              class: \"iti__divider\",\n              \"aria-hidden\": \"true\"\n            },\n            this.countryList\n          );\n        }\n        this._appendListItems(this.countries, \"iti__standard\");\n        if (countrySearch) {\n          this._updateSearchResultsText();\n        }\n        if (dropdownContainer) {\n          let dropdownClasses = \"iti iti--container\";\n          if (useFullscreenPopup) {\n            dropdownClasses += \" iti--fullscreen-popup\";\n          } else {\n            dropdownClasses += \" iti--inline-dropdown\";\n          }\n          if (countrySearch) {\n            dropdownClasses += \" iti--country-search\";\n          }\n          this.dropdown = createEl(\"div\", { class: dropdownClasses });\n          this.dropdown.appendChild(this.dropdownContent);\n        } else {\n          this.countryContainer.appendChild(this.dropdownContent);\n        }\n      }\n      if (hiddenInput) {\n        const telInputName = this.telInput.getAttribute(\"name\") || \"\";\n        const names = hiddenInput(telInputName);\n        if (names.phone) {\n          this.hiddenInput = createEl(\"input\", {\n            type: \"hidden\",\n            name: names.phone\n          });\n          wrapper.appendChild(this.hiddenInput);\n        }\n        if (names.country) {\n          this.hiddenInputCountry = createEl(\"input\", {\n            type: \"hidden\",\n            name: names.country\n          });\n          wrapper.appendChild(this.hiddenInputCountry);\n        }\n      }\n    }\n    //* For each of the passed countries: add a country <li> to the countryList <ul> container.\n    _appendListItems(countries, className, preferred) {\n      for (let i = 0; i < countries.length; i++) {\n        const c = countries[i];\n        const idSuffix = preferred ? \"-preferred\" : \"\";\n        const listItem = createEl(\n          \"li\",\n          {\n            id: `iti-${this.id}__item-${c.iso2}${idSuffix}`,\n            class: `iti__country ${className}`,\n            tabindex: \"-1\",\n            role: \"option\",\n            \"data-dial-code\": c.dialCode,\n            \"data-country-code\": c.iso2,\n            \"aria-selected\": \"false\"\n          },\n          this.countryList\n        );\n        c.nodeById[this.id] = listItem;\n        let content = \"\";\n        if (this.options.showFlags) {\n          content += `<div class='iti__flag-box'><div class='iti__flag iti__${c.iso2}'></div></div>`;\n        }\n        content += `<span class='iti__country-name'>${c.name}</span>`;\n        content += `<span class='iti__dial-code'>+${c.dialCode}</span>`;\n        listItem.insertAdjacentHTML(\"beforeend\", content);\n      }\n    }\n    //* Set the initial state of the input value and the selected country by:\n    //* 1. Extracting a dial code from the given number\n    //* 2. Using explicit initialCountry\n    //* 3. Picking the first preferred country\n    //* 4. Picking the first country\n    _setInitialState(overrideAutoCountry = false) {\n      const attributeValue = this.telInput.getAttribute(\"value\");\n      const inputValue = this.telInput.value;\n      const useAttribute = attributeValue && attributeValue.charAt(0) === \"+\" && (!inputValue || inputValue.charAt(0) !== \"+\");\n      const val = useAttribute ? attributeValue : inputValue;\n      const dialCode = this._getDialCode(val);\n      const isRegionlessNanpNumber = isRegionlessNanp(val);\n      const { initialCountry } = this.options;\n      if (dialCode && !isRegionlessNanpNumber) {\n        this._updateCountryFromNumber(val);\n      } else if (initialCountry !== \"auto\" || overrideAutoCountry) {\n        const lowerInitialCountry = initialCountry ? initialCountry.toLowerCase() : \"\";\n        const isValidInitialCountry = lowerInitialCountry && this._getCountryData(lowerInitialCountry, true);\n        if (isValidInitialCountry) {\n          this._setCountry(lowerInitialCountry);\n        } else {\n          if (dialCode && isRegionlessNanpNumber) {\n            this._setCountry(\"us\");\n          } else {\n            this._setCountry();\n          }\n        }\n      }\n      if (val) {\n        this._updateValFromNumber(val);\n      }\n    }\n    //* Initialise the main event listeners: input keyup, and click selected country.\n    _initListeners() {\n      this._initTelInputListeners();\n      if (this.options.allowDropdown) {\n        this._initDropdownListeners();\n      }\n      if ((this.hiddenInput || this.hiddenInputCountry) && this.telInput.form) {\n        this._initHiddenInputListener();\n      }\n    }\n    //* Update hidden input on form submit.\n    _initHiddenInputListener() {\n      this._handleHiddenInputSubmit = () => {\n        if (this.hiddenInput) {\n          this.hiddenInput.value = this.getNumber();\n        }\n        if (this.hiddenInputCountry) {\n          this.hiddenInputCountry.value = this.getSelectedCountryData().iso2 || \"\";\n        }\n      };\n      this.telInput.form?.addEventListener(\n        \"submit\",\n        this._handleHiddenInputSubmit\n      );\n    }\n    //* initialise the dropdown listeners.\n    _initDropdownListeners() {\n      this._handleLabelClick = (e) => {\n        if (this.dropdownContent.classList.contains(\"iti__hide\")) {\n          this.telInput.focus();\n        } else {\n          e.preventDefault();\n        }\n      };\n      const label = this.telInput.closest(\"label\");\n      if (label) {\n        label.addEventListener(\"click\", this._handleLabelClick);\n      }\n      this._handleClickSelectedCountry = () => {\n        if (this.dropdownContent.classList.contains(\"iti__hide\") && !this.telInput.disabled && !this.telInput.readOnly) {\n          this._openDropdown();\n        }\n      };\n      this.selectedCountry.addEventListener(\"click\", this._handleClickSelectedCountry);\n      this._handleCountryContainerKeydown = (e) => {\n        const isDropdownHidden = this.dropdownContent.classList.contains(\"iti__hide\");\n        if (isDropdownHidden && [\"ArrowUp\", \"ArrowDown\", \" \", \"Enter\"].includes(e.key)) {\n          e.preventDefault();\n          e.stopPropagation();\n          this._openDropdown();\n        }\n        if (e.key === \"Tab\") {\n          this._closeDropdown();\n        }\n      };\n      this.countryContainer.addEventListener(\n        \"keydown\",\n        this._handleCountryContainerKeydown\n      );\n    }\n    //* Init many requests: utils script / geo ip lookup.\n    _initRequests() {\n      if (this.options.utilsScript && !window.intlTelInputUtils) {\n        if (window.intlTelInputGlobals.documentReady()) {\n          window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n        } else {\n          window.addEventListener(\"load\", () => {\n            window.intlTelInputGlobals.loadUtils(this.options.utilsScript);\n          });\n        }\n      } else {\n        this.resolveUtilsScriptPromise();\n      }\n      if (this.options.initialCountry === \"auto\" && !this.selectedCountryData.iso2) {\n        this._loadAutoCountry();\n      } else {\n        this.resolveAutoCountryPromise();\n      }\n    }\n    //* Perform the geo ip lookup.\n    _loadAutoCountry() {\n      if (window.intlTelInputGlobals.autoCountry) {\n        this.handleAutoCountry();\n      } else if (!window.intlTelInputGlobals.startedLoadingAutoCountry) {\n        window.intlTelInputGlobals.startedLoadingAutoCountry = true;\n        if (typeof this.options.geoIpLookup === \"function\") {\n          this.options.geoIpLookup(\n            (iso2 = \"\") => {\n              const iso2Lower = iso2.toLowerCase();\n              const isValidIso2 = iso2Lower && this._getCountryData(iso2Lower, true);\n              if (isValidIso2) {\n                window.intlTelInputGlobals.autoCountry = iso2Lower;\n                setTimeout(() => forEachInstance(\"handleAutoCountry\"));\n              } else {\n                this._setInitialState(true);\n                forEachInstance(\"rejectAutoCountryPromise\");\n              }\n            },\n            () => {\n              this._setInitialState(true);\n              forEachInstance(\"rejectAutoCountryPromise\");\n            }\n          );\n        }\n      }\n    }\n    //* Initialize the tel input listeners.\n    _initTelInputListeners() {\n      const { strictMode, formatAsYouType } = this.options;\n      let userOverrideFormatting = false;\n      this._handleInputEvent = (e) => {\n        if (this._updateCountryFromNumber(this.telInput.value)) {\n          this._triggerCountryChange();\n        }\n        const isFormattingChar = e && e.data && /[^+0-9]/.test(e.data);\n        const isPaste = e && e.inputType === \"insertFromPaste\" && this.telInput.value;\n        if (isFormattingChar || isPaste && !strictMode) {\n          userOverrideFormatting = true;\n        } else if (!/[^+0-9]/.test(this.telInput.value)) {\n          userOverrideFormatting = false;\n        }\n        if (formatAsYouType && !userOverrideFormatting) {\n          const currentCaretPos = this.telInput.selectionStart || 0;\n          const valueBeforeCaret = this.telInput.value.substring(0, currentCaretPos);\n          const relevantCharsBeforeCaret = valueBeforeCaret.replace(/[^+0-9]/g, \"\").length;\n          const isDeleteForwards = e && e.inputType === \"deleteContentForward\";\n          const formattedValue = this._formatNumberAsYouType();\n          const newCaretPos = translateCursorPosition(relevantCharsBeforeCaret, formattedValue, currentCaretPos, isDeleteForwards);\n          this.telInput.value = formattedValue;\n          this.telInput.setSelectionRange(newCaretPos, newCaretPos);\n        }\n      };\n      this.telInput.addEventListener(\"input\", this._handleInputEvent);\n      if (strictMode) {\n        this._handleKeydownEvent = (e) => {\n          if (e.key.length === 1 && !e.altKey && !e.ctrlKey && !e.metaKey) {\n            const isInitialPlus = this.telInput.selectionStart === 0 && e.key === \"+\";\n            const isNumeric = /^[0-9]$/.test(e.key);\n            const isAllowedChar = isInitialPlus || isNumeric;\n            const fullNumber = this._getFullNumber();\n            const coreNumber = window.intlTelInputUtils.getCoreNumber(fullNumber, this.selectedCountryData.iso2);\n            const hasReachedMaxLength = this.maxCoreNumberLength && coreNumber.length >= this.maxCoreNumberLength;\n            if (!isAllowedChar || hasReachedMaxLength) {\n              e.preventDefault();\n            }\n          }\n        };\n        this.telInput.addEventListener(\"keydown\", this._handleKeydownEvent);\n      }\n    }\n    //* Adhere to the input's maxlength attr.\n    _cap(number) {\n      const max = parseInt(this.telInput.getAttribute(\"maxlength\") || \"\", 10);\n      return max && number.length > max ? number.substr(0, max) : number;\n    }\n    //* Trigger a custom event on the input.\n    _trigger(name) {\n      const e = new Event(name, {\n        bubbles: true,\n        cancelable: true\n      });\n      this.telInput.dispatchEvent(e);\n    }\n    //* Open the dropdown.\n    _openDropdown() {\n      const { fixDropdownWidth, countrySearch } = this.options;\n      if (fixDropdownWidth) {\n        this.dropdownContent.style.width = `${this.telInput.offsetWidth}px`;\n      }\n      this.dropdownContent.classList.remove(\"iti__hide\");\n      this.selectedCountry.setAttribute(\"aria-expanded\", \"true\");\n      this._setDropdownPosition();\n      if (this.activeItem && !countrySearch) {\n        this._highlightListItem(this.activeItem, false);\n        this._scrollTo(this.activeItem, true);\n      } else {\n        const firstCountryItem = this.countryList.firstElementChild;\n        if (firstCountryItem) {\n          this._highlightListItem(firstCountryItem, false);\n          this.countryList.scrollTop = 0;\n        }\n        if (countrySearch) {\n          this.searchInput.focus();\n        }\n      }\n      this._bindDropdownListeners();\n      this.dropdownArrow.classList.add(\"iti__arrow--up\");\n      this._trigger(\"open:countrydropdown\");\n    }\n    //* Decide if should position dropdown above or below input (depends on position within viewport, and scroll).\n    _setDropdownPosition() {\n      if (this.options.dropdownContainer) {\n        this.options.dropdownContainer.appendChild(this.dropdown);\n      }\n      if (!this.options.useFullscreenPopup) {\n        const pos = this.telInput.getBoundingClientRect();\n        const windowTop = document.documentElement.scrollTop;\n        const inputTop = pos.top + windowTop;\n        const dropdownHeight = this.dropdownContent.offsetHeight;\n        const dropdownFitsBelow = inputTop + this.telInput.offsetHeight + dropdownHeight < windowTop + window.innerHeight;\n        const dropdownFitsAbove = inputTop - dropdownHeight > windowTop;\n        const positionDropdownAboveInput = !this.options.countrySearch && !dropdownFitsBelow && dropdownFitsAbove;\n        toggleClass(\n          this.dropdownContent,\n          \"iti__dropdown-content--dropup\",\n          positionDropdownAboveInput\n        );\n        if (this.options.dropdownContainer) {\n          const extraTop = positionDropdownAboveInput ? 0 : this.telInput.offsetHeight;\n          this.dropdown.style.top = `${inputTop + extraTop}px`;\n          this.dropdown.style.left = `${pos.left + document.body.scrollLeft}px`;\n          this._handleWindowScroll = () => this._closeDropdown();\n          window.addEventListener(\"scroll\", this._handleWindowScroll);\n        }\n      }\n    }\n    //* We only bind dropdown listeners when the dropdown is open.\n    _bindDropdownListeners() {\n      this._handleMouseoverCountryList = (e) => {\n        const listItem = e.target?.closest(\".iti__country\");\n        if (listItem) {\n          this._highlightListItem(listItem, false);\n        }\n      };\n      this.countryList.addEventListener(\n        \"mouseover\",\n        this._handleMouseoverCountryList\n      );\n      this._handleClickCountryList = (e) => {\n        const listItem = e.target?.closest(\".iti__country\");\n        if (listItem) {\n          this._selectListItem(listItem);\n        }\n      };\n      this.countryList.addEventListener(\"click\", this._handleClickCountryList);\n      let isOpening = true;\n      this._handleClickOffToClose = () => {\n        if (!isOpening) {\n          this._closeDropdown();\n        }\n        isOpening = false;\n      };\n      document.documentElement.addEventListener(\n        \"click\",\n        this._handleClickOffToClose\n      );\n      let query = \"\";\n      let queryTimer = null;\n      this._handleKeydownOnDropdown = (e) => {\n        if ([\"ArrowUp\", \"ArrowDown\", \"Enter\", \"Escape\"].includes(e.key)) {\n          e.preventDefault();\n          e.stopPropagation();\n          if (e.key === \"ArrowUp\" || e.key === \"ArrowDown\") {\n            this._handleUpDownKey(e.key);\n          } else if (e.key === \"Enter\") {\n            this._handleEnterKey();\n          } else if (e.key === \"Escape\") {\n            this._closeDropdown();\n          }\n        }\n        if (!this.options.countrySearch && /^[a-zA-ZÀ-ÿа-яА-Я ]$/.test(e.key)) {\n          e.stopPropagation();\n          if (queryTimer) {\n            clearTimeout(queryTimer);\n          }\n          query += e.key.toLowerCase();\n          this._searchForCountry(query);\n          queryTimer = setTimeout(() => {\n            query = \"\";\n          }, 1e3);\n        }\n      };\n      document.addEventListener(\"keydown\", this._handleKeydownOnDropdown);\n      if (this.options.countrySearch) {\n        const doFilter = () => {\n          const inputQuery = this.searchInput.value.trim();\n          if (inputQuery) {\n            this._filterCountries(inputQuery);\n          } else {\n            this._filterCountries(\"\", true);\n          }\n        };\n        let keyupTimer = null;\n        this._handleSearchChange = () => {\n          if (keyupTimer) {\n            clearTimeout(keyupTimer);\n          }\n          keyupTimer = setTimeout(() => {\n            doFilter();\n            keyupTimer = null;\n          }, 100);\n        };\n        this.searchInput.addEventListener(\"input\", this._handleSearchChange);\n        this.searchInput.addEventListener(\"click\", (e) => e.stopPropagation());\n      }\n    }\n    _filterCountries(query, isReset = false) {\n      let isFirst = true;\n      this.countryList.innerHTML = \"\";\n      const normalisedQuery = normaliseString(query);\n      for (let i = 0; i < this.countries.length; i++) {\n        const c = this.countries[i];\n        const normalisedCountryName = normaliseString(c.name);\n        const fullDialCode = `+${c.dialCode}`;\n        if (isReset || normalisedCountryName.includes(normalisedQuery) || fullDialCode.includes(normalisedQuery) || c.iso2.includes(normalisedQuery)) {\n          const listItem = c.nodeById[this.id];\n          if (listItem) {\n            this.countryList.appendChild(listItem);\n          }\n          if (isFirst) {\n            this._highlightListItem(listItem, false);\n            isFirst = false;\n          }\n        }\n      }\n      this.countryList.scrollTop = 0;\n      this._updateSearchResultsText();\n    }\n    //* Update search results text (for a11y).\n    _updateSearchResultsText() {\n      const { i18n } = this.options;\n      const count = this.countryList.childElementCount;\n      let searchText;\n      if (count === 0) {\n        searchText = i18n.zeroSearchResults || \"No results found\";\n      } else if (count === 1) {\n        searchText = i18n.oneSearchResult || \"1 result found\";\n      } else {\n        searchText = i18n.multipleSearchResults ? i18n.multipleSearchResults.replace(\"${count}\", count.toString()) : `${count} results found`;\n      }\n      this.searchResultsA11yText.textContent = searchText;\n    }\n    //* Highlight the next/prev item in the list (and ensure it is visible).\n    _handleUpDownKey(key) {\n      let next = key === \"ArrowUp\" ? this.highlightedItem?.previousElementSibling : this.highlightedItem?.nextElementSibling;\n      if (next) {\n        if (next.classList.contains(\"iti__divider\")) {\n          next = key === \"ArrowUp\" ? next.previousElementSibling : next.nextElementSibling;\n        }\n      } else if (this.countryList.childElementCount > 1) {\n        next = key === \"ArrowUp\" ? this.countryList.lastElementChild : this.countryList.firstElementChild;\n      }\n      if (next) {\n        this._scrollTo(next, false);\n        const doFocus = !this.options.countrySearch;\n        this._highlightListItem(next, doFocus);\n      }\n    }\n    //* Select the currently highlighted item.\n    _handleEnterKey() {\n      if (this.highlightedItem) {\n        this._selectListItem(this.highlightedItem);\n      }\n    }\n    //* Find the first list item whose name starts with the query string.\n    _searchForCountry(query) {\n      for (let i = 0; i < this.countries.length; i++) {\n        const c = this.countries[i];\n        const startsWith = c.name.substr(0, query.length).toLowerCase() === query;\n        if (startsWith) {\n          const listItem = c.nodeById[this.id];\n          this._highlightListItem(listItem, false);\n          this._scrollTo(listItem, true);\n          break;\n        }\n      }\n    }\n    //* Update the input's value to the given val (format first if possible)\n    //* NOTE: this is called from _setInitialState, handleUtils and setNumber.\n    _updateValFromNumber(fullNumber) {\n      let number = fullNumber;\n      if (this.options.formatOnDisplay && window.intlTelInputUtils && this.selectedCountryData) {\n        const useNational = this.options.nationalMode || number.charAt(0) !== \"+\" && !this.options.showSelectedDialCode;\n        const { NATIONAL, INTERNATIONAL } = window.intlTelInputUtils.numberFormat;\n        const format = useNational ? NATIONAL : INTERNATIONAL;\n        number = window.intlTelInputUtils.formatNumber(\n          number,\n          this.selectedCountryData.iso2,\n          format\n        );\n      }\n      number = this._beforeSetNumber(number);\n      this.telInput.value = number;\n    }\n    //* Check if need to select a new country based on the given number\n    //* Note: called from _setInitialState, keyup handler, setNumber.\n    _updateCountryFromNumber(fullNumber) {\n      const plusIndex = fullNumber.indexOf(\"+\");\n      let number = plusIndex ? fullNumber.substring(plusIndex) : fullNumber;\n      const selectedDialCode = this.selectedCountryData.dialCode;\n      const isNanp = selectedDialCode === \"1\";\n      if (number && isNanp && number.charAt(0) !== \"+\") {\n        if (number.charAt(0) !== \"1\") {\n          number = `1${number}`;\n        }\n        number = `+${number}`;\n      }\n      if (this.options.showSelectedDialCode && selectedDialCode && number.charAt(0) !== \"+\") {\n        number = `+${selectedDialCode}${number}`;\n      }\n      const dialCode = this._getDialCode(number, true);\n      const numeric = getNumeric(number);\n      let iso2 = null;\n      if (dialCode) {\n        const iso2Codes = this.dialCodeToIso2Map[getNumeric(dialCode)];\n        const alreadySelected = iso2Codes.indexOf(this.selectedCountryData.iso2) !== -1 && numeric.length <= dialCode.length - 1;\n        const isRegionlessNanpNumber = selectedDialCode === \"1\" && isRegionlessNanp(numeric);\n        if (!isRegionlessNanpNumber && !alreadySelected) {\n          for (let j = 0; j < iso2Codes.length; j++) {\n            if (iso2Codes[j]) {\n              iso2 = iso2Codes[j];\n              break;\n            }\n          }\n        }\n      } else if (number.charAt(0) === \"+\" && numeric.length) {\n        iso2 = \"\";\n      } else if ((!number || number === \"+\") && !this.selectedCountryData.iso2) {\n        iso2 = this.defaultCountry;\n      }\n      if (iso2 !== null) {\n        return this._setCountry(iso2);\n      }\n      return false;\n    }\n    //* Remove highlighting from other list items and highlight the given item.\n    _highlightListItem(listItem, shouldFocus) {\n      const prevItem = this.highlightedItem;\n      if (prevItem) {\n        prevItem.classList.remove(\"iti__highlight\");\n        prevItem.setAttribute(\"aria-selected\", \"false\");\n      }\n      this.highlightedItem = listItem;\n      this.highlightedItem.classList.add(\"iti__highlight\");\n      this.highlightedItem.setAttribute(\"aria-selected\", \"true\");\n      this.selectedCountry.setAttribute(\n        \"aria-activedescendant\",\n        listItem.getAttribute(\"id\") || \"\"\n      );\n      if (this.options.countrySearch) {\n        this.searchInput.setAttribute(\n          \"aria-activedescendant\",\n          listItem.getAttribute(\"id\") || \"\"\n        );\n      }\n      if (shouldFocus) {\n        this.highlightedItem.focus();\n      }\n    }\n    //* Find the country data for the given iso2 code\n    //* the ignoreOnlyCountriesOption is only used during init() while parsing the onlyCountries array\n    _getCountryData(iso2, allowFail) {\n      for (let i = 0; i < this.countries.length; i++) {\n        if (this.countries[i].iso2 === iso2) {\n          return this.countries[i];\n        }\n      }\n      if (allowFail) {\n        return null;\n      }\n      throw new Error(`No country data for '${iso2}'`);\n    }\n    //* Update the selected country, dial code (if showSelectedDialCode), placeholder, title, and active list item.\n    //* Note: called from _setInitialState, _updateCountryFromNumber, _selectListItem, setCountry.\n    _setCountry(iso2) {\n      const { allowDropdown, showSelectedDialCode, showFlags, countrySearch, i18n } = this.options;\n      const prevCountry = this.selectedCountryData.iso2 ? this.selectedCountryData : {};\n      this.selectedCountryData = iso2 ? this._getCountryData(iso2, false) || {} : {};\n      if (this.selectedCountryData.iso2) {\n        this.defaultCountry = this.selectedCountryData.iso2;\n      }\n      if (this.selectedCountryInner) {\n        let flagClass = \"\";\n        let a11yText = \"\";\n        if (iso2) {\n          if (showFlags) {\n            flagClass = `iti__flag iti__${iso2}`;\n            a11yText = `${this.selectedCountryData.name} +${this.selectedCountryData.dialCode}`;\n          }\n        } else {\n          flagClass = \"iti__flag iti__globe\";\n          a11yText = i18n.noCountrySelected || \"No country selected\";\n        }\n        this.selectedCountryInner.className = flagClass;\n        this.selectedCountryA11yText.textContent = a11yText;\n      }\n      this._setSelectedCountryTitleAttribute(iso2, showSelectedDialCode);\n      if (showSelectedDialCode) {\n        const dialCode = this.selectedCountryData.dialCode ? `+${this.selectedCountryData.dialCode}` : \"\";\n        this.selectedDialCode.innerHTML = dialCode;\n        const selectedCountryWidth = this.selectedCountry.offsetWidth || this._getHiddenSelectedCountryWidth();\n        if (this.isRTL) {\n          this.telInput.style.paddingRight = `${selectedCountryWidth + 6}px`;\n        } else {\n          this.telInput.style.paddingLeft = `${selectedCountryWidth + 6}px`;\n        }\n      }\n      this._updatePlaceholder();\n      this._updateMaxLength();\n      if (allowDropdown && !countrySearch) {\n        const prevItem = this.activeItem;\n        if (prevItem) {\n          prevItem.classList.remove(\"iti__active\");\n          prevItem.setAttribute(\"aria-selected\", \"false\");\n        }\n        if (iso2) {\n          const nextItem = this.countryList.querySelector(\n            `#iti-${this.id}__item-${iso2}-preferred`\n          ) || this.countryList.querySelector(\n            `#iti-${this.id}__item-${iso2}`\n          );\n          if (nextItem) {\n            nextItem.setAttribute(\"aria-selected\", \"true\");\n            nextItem.classList.add(\"iti__active\");\n            this.activeItem = nextItem;\n          }\n        }\n      }\n      return prevCountry.iso2 !== iso2;\n    }\n    //* Update the maximum valid number length for the currently selected country.\n    _updateMaxLength() {\n      if (this.options.strictMode && window.intlTelInputUtils) {\n        if (this.selectedCountryData.iso2) {\n          const numberType = window.intlTelInputUtils.numberType[this.options.placeholderNumberType];\n          let exampleNumber = window.intlTelInputUtils.getExampleNumber(\n            this.selectedCountryData.iso2,\n            false,\n            numberType,\n            true\n          );\n          let validNumber = exampleNumber;\n          while (window.intlTelInputUtils.isPossibleNumber(exampleNumber, this.selectedCountryData.iso2)) {\n            validNumber = exampleNumber;\n            exampleNumber += \"0\";\n          }\n          const coreNumber = window.intlTelInputUtils.getCoreNumber(validNumber, this.selectedCountryData.iso2);\n          this.maxCoreNumberLength = coreNumber.length;\n        } else {\n          this.maxCoreNumberLength = null;\n        }\n      }\n    }\n    _setSelectedCountryTitleAttribute(iso2 = null, showSelectedDialCode) {\n      if (!this.selectedCountry) {\n        return;\n      }\n      let title;\n      if (iso2 && !showSelectedDialCode) {\n        title = `${this.selectedCountryData.name}: +${this.selectedCountryData.dialCode}`;\n      } else if (iso2) {\n        title = this.selectedCountryData.name;\n      } else {\n        title = \"Unknown\";\n      }\n      this.selectedCountry.setAttribute(\"title\", title);\n    }\n    //* When the input is in a hidden container during initialisation, we must inject some markup\n    //* into the end of the DOM to calculate the correct offsetWidth.\n    //* NOTE: this is only used when showSelectedDialCode is enabled, so countryContainer and selectedCountry\n    //* will definitely exist.\n    _getHiddenSelectedCountryWidth() {\n      if (this.telInput.parentNode) {\n        const containerClone = this.telInput.parentNode.cloneNode(false);\n        containerClone.style.visibility = \"hidden\";\n        document.body.appendChild(containerClone);\n        const countryContainerClone = this.countryContainer.cloneNode();\n        containerClone.appendChild(countryContainerClone);\n        const selectedCountryClone = this.selectedCountry.cloneNode(true);\n        countryContainerClone.appendChild(selectedCountryClone);\n        const width = selectedCountryClone.offsetWidth;\n        document.body.removeChild(containerClone);\n        return width;\n      }\n      return 0;\n    }\n    //* Update the input placeholder to an example number from the currently selected country.\n    _updatePlaceholder() {\n      const {\n        autoPlaceholder,\n        placeholderNumberType,\n        nationalMode,\n        customPlaceholder\n      } = this.options;\n      const shouldSetPlaceholder = autoPlaceholder === \"aggressive\" || !this.hadInitialPlaceholder && autoPlaceholder === \"polite\";\n      if (window.intlTelInputUtils && shouldSetPlaceholder) {\n        const numberType = window.intlTelInputUtils.numberType[placeholderNumberType];\n        let placeholder = this.selectedCountryData.iso2 ? window.intlTelInputUtils.getExampleNumber(\n          this.selectedCountryData.iso2,\n          nationalMode,\n          numberType\n        ) : \"\";\n        placeholder = this._beforeSetNumber(placeholder);\n        if (typeof customPlaceholder === \"function\") {\n          placeholder = customPlaceholder(placeholder, this.selectedCountryData);\n        }\n        this.telInput.setAttribute(\"placeholder\", placeholder);\n      }\n    }\n    //* Called when the user selects a list item from the dropdown.\n    _selectListItem(listItem) {\n      const countryChanged = this._setCountry(\n        listItem.getAttribute(\"data-country-code\")\n      );\n      this._closeDropdown();\n      this._updateDialCode(listItem.getAttribute(\"data-dial-code\"));\n      this.telInput.focus();\n      if (countryChanged) {\n        this._triggerCountryChange();\n      }\n    }\n    //* Close the dropdown and unbind any listeners.\n    _closeDropdown() {\n      this.dropdownContent.classList.add(\"iti__hide\");\n      this.selectedCountry.setAttribute(\"aria-expanded\", \"false\");\n      this.selectedCountry.removeAttribute(\"aria-activedescendant\");\n      if (this.highlightedItem) {\n        this.highlightedItem.setAttribute(\"aria-selected\", \"false\");\n      }\n      if (this.options.countrySearch) {\n        this.searchInput.removeAttribute(\"aria-activedescendant\");\n      }\n      this.dropdownArrow.classList.remove(\"iti__arrow--up\");\n      document.removeEventListener(\"keydown\", this._handleKeydownOnDropdown);\n      if (this.options.countrySearch) {\n        this.searchInput.removeEventListener(\"input\", this._handleSearchChange);\n      }\n      document.documentElement.removeEventListener(\n        \"click\",\n        this._handleClickOffToClose\n      );\n      this.countryList.removeEventListener(\n        \"mouseover\",\n        this._handleMouseoverCountryList\n      );\n      this.countryList.removeEventListener(\"click\", this._handleClickCountryList);\n      if (this.options.dropdownContainer) {\n        if (!this.options.useFullscreenPopup) {\n          window.removeEventListener(\"scroll\", this._handleWindowScroll);\n        }\n        if (this.dropdown.parentNode) {\n          this.dropdown.parentNode.removeChild(this.dropdown);\n        }\n      }\n      this._trigger(\"close:countrydropdown\");\n    }\n    //* Check if an element is visible within it's container, else scroll until it is.\n    _scrollTo(element, middle) {\n      const container = this.countryList;\n      const windowTop = document.documentElement.scrollTop;\n      const containerHeight = container.offsetHeight;\n      const containerTop = container.getBoundingClientRect().top + windowTop;\n      const containerBottom = containerTop + containerHeight;\n      const elementHeight = element.offsetHeight;\n      const elementTop = element.getBoundingClientRect().top + windowTop;\n      const elementBottom = elementTop + elementHeight;\n      let newScrollTop = elementTop - containerTop + container.scrollTop;\n      const middleOffset = containerHeight / 2 - elementHeight / 2;\n      if (elementTop < containerTop) {\n        if (middle) {\n          newScrollTop -= middleOffset;\n        }\n        container.scrollTop = newScrollTop;\n      } else if (elementBottom > containerBottom) {\n        if (middle) {\n          newScrollTop += middleOffset;\n        }\n        const heightDifference = containerHeight - elementHeight;\n        container.scrollTop = newScrollTop - heightDifference;\n      }\n    }\n    //* Replace any existing dial code with the new one\n    //* Note: called from _selectListItem and setCountry\n    _updateDialCode(newDialCodeBare) {\n      const inputVal = this.telInput.value;\n      const newDialCode = `+${newDialCodeBare}`;\n      let newNumber;\n      if (inputVal.charAt(0) === \"+\") {\n        const prevDialCode = this._getDialCode(inputVal);\n        if (prevDialCode) {\n          newNumber = inputVal.replace(prevDialCode, newDialCode);\n        } else {\n          newNumber = newDialCode;\n        }\n        this.telInput.value = newNumber;\n      }\n    }\n    //* Try and extract a valid international dial code from a full telephone number.\n    //* Note: returns the raw string inc plus character and any whitespace/dots etc.\n    _getDialCode(number, includeAreaCode) {\n      let dialCode = \"\";\n      if (number.charAt(0) === \"+\") {\n        let numericChars = \"\";\n        for (let i = 0; i < number.length; i++) {\n          const c = number.charAt(i);\n          if (!isNaN(parseInt(c, 10))) {\n            numericChars += c;\n            if (includeAreaCode) {\n              if (this.dialCodeToIso2Map[numericChars]) {\n                dialCode = number.substr(0, i + 1);\n              }\n            } else {\n              if (this.dialCodes[numericChars]) {\n                dialCode = number.substr(0, i + 1);\n                break;\n              }\n            }\n            if (numericChars.length === this.dialCodeMaxLen) {\n              break;\n            }\n          }\n        }\n      }\n      return dialCode;\n    }\n    //* Get the input val, adding the dial code if showSelectedDialCode is enabled.\n    _getFullNumber() {\n      const val = this.telInput.value.trim();\n      const { dialCode } = this.selectedCountryData;\n      let prefix;\n      const numericVal = getNumeric(val);\n      if (this.options.showSelectedDialCode && !this.options.nationalMode && val.charAt(0) !== \"+\" && dialCode && numericVal) {\n        prefix = `+${dialCode}`;\n      } else {\n        prefix = \"\";\n      }\n      return prefix + val;\n    }\n    //* Remove the dial code if showSelectedDialCode is enabled also cap the length if the input has a maxlength attribute\n    _beforeSetNumber(fullNumber) {\n      let number = fullNumber;\n      if (this.options.showSelectedDialCode) {\n        let dialCode = this._getDialCode(number);\n        if (dialCode) {\n          dialCode = `+${this.selectedCountryData.dialCode}`;\n          const start = number[dialCode.length] === \" \" || number[dialCode.length] === \"-\" ? dialCode.length + 1 : dialCode.length;\n          number = number.substr(start);\n        }\n      }\n      return this._cap(number);\n    }\n    //* Trigger the 'countrychange' event.\n    _triggerCountryChange() {\n      this._trigger(\"countrychange\");\n    }\n    //* Format the number as the user types.\n    _formatNumberAsYouType() {\n      const val = this._getFullNumber();\n      const result = window.intlTelInputUtils ? window.intlTelInputUtils.formatNumberAsYouType(val, this.selectedCountryData.iso2) : val;\n      const { dialCode } = this.selectedCountryData;\n      if (this.options.showSelectedDialCode && !this.options.nationalMode && this.telInput.value.charAt(0) !== \"+\" && result.includes(`+${dialCode}`)) {\n        const afterDialCode = result.split(`+${dialCode}`)[1] || \"\";\n        return afterDialCode.trim();\n      }\n      return result;\n    }\n    //**************************\n    //*  SECRET PUBLIC METHODS\n    //**************************\n    //* This is called when the geoip call returns.\n    handleAutoCountry() {\n      if (this.options.initialCountry === \"auto\" && window.intlTelInputGlobals.autoCountry) {\n        this.defaultCountry = window.intlTelInputGlobals.autoCountry;\n        if (!this.telInput.value) {\n          this.setCountry(this.defaultCountry);\n        }\n        this.resolveAutoCountryPromise();\n      }\n    }\n    //* This is called when the utils request completes.\n    handleUtils() {\n      if (window.intlTelInputUtils) {\n        if (this.telInput.value) {\n          this._updateValFromNumber(this.telInput.value);\n        }\n        if (this.selectedCountryData.iso2) {\n          this._updatePlaceholder();\n          this._updateMaxLength();\n        }\n      }\n      this.resolveUtilsScriptPromise();\n    }\n    //********************\n    //*  PUBLIC METHODS\n    //********************\n    //* Remove plugin.\n    destroy() {\n      if (this.options.allowDropdown) {\n        this._closeDropdown();\n        this.selectedCountry.removeEventListener(\n          \"click\",\n          this._handleClickSelectedCountry\n        );\n        this.countryContainer.removeEventListener(\n          \"keydown\",\n          this._handleCountryContainerKeydown\n        );\n        const label = this.telInput.closest(\"label\");\n        if (label) {\n          label.removeEventListener(\"click\", this._handleLabelClick);\n        }\n      }\n      const { form } = this.telInput;\n      if (this._handleHiddenInputSubmit && form) {\n        form.removeEventListener(\"submit\", this._handleHiddenInputSubmit);\n      }\n      this.telInput.removeEventListener(\"input\", this._handleInputEvent);\n      if (this._handleKeydownEvent) {\n        this.telInput.removeEventListener(\"keydown\", this._handleKeydownEvent);\n      }\n      this.telInput.removeAttribute(\"data-intl-tel-input-id\");\n      const wrapper = this.telInput.parentNode;\n      wrapper?.parentNode?.insertBefore(this.telInput, wrapper);\n      wrapper?.parentNode?.removeChild(wrapper);\n      delete window.intlTelInputGlobals.instances[this.id];\n    }\n    //* Get the extension from the current number.\n    getExtension() {\n      if (window.intlTelInputUtils) {\n        return window.intlTelInputUtils.getExtension(\n          this._getFullNumber(),\n          this.selectedCountryData.iso2\n        );\n      }\n      return \"\";\n    }\n    //* Format the number to the given format.\n    getNumber(format) {\n      if (window.intlTelInputUtils) {\n        const { iso2 } = this.selectedCountryData;\n        return window.intlTelInputUtils.formatNumber(\n          this._getFullNumber(),\n          iso2,\n          format\n        );\n      }\n      return \"\";\n    }\n    //* Get the type of the entered number e.g. landline/mobile.\n    getNumberType() {\n      if (window.intlTelInputUtils) {\n        return window.intlTelInputUtils.getNumberType(\n          this._getFullNumber(),\n          this.selectedCountryData.iso2\n        );\n      }\n      return -99;\n    }\n    //* Get the country data for the currently selected country.\n    getSelectedCountryData() {\n      return this.selectedCountryData;\n    }\n    //* Get the validation error.\n    getValidationError() {\n      if (window.intlTelInputUtils) {\n        const { iso2 } = this.selectedCountryData;\n        return window.intlTelInputUtils.getValidationError(this._getFullNumber(), iso2);\n      }\n      return -99;\n    }\n    //* Validate the input val - assumes the global function isPossibleNumber (from utilsScript).\n    isValidNumber(mobileOnly = true) {\n      const val = this._getFullNumber();\n      if (/\\p{L}/u.test(val)) {\n        return false;\n      }\n      return window.intlTelInputUtils ? window.intlTelInputUtils.isPossibleNumber(val, this.selectedCountryData.iso2, mobileOnly) : null;\n    }\n    //* Validate the input val (precise) - assumes the global function isValidNumber (from utilsScript).\n    isValidNumberPrecise() {\n      const val = this._getFullNumber();\n      if (/\\p{L}/u.test(val)) {\n        return false;\n      }\n      return window.intlTelInputUtils ? window.intlTelInputUtils.isValidNumber(val, this.selectedCountryData.iso2) : null;\n    }\n    //* Update the selected country, and update the input val accordingly.\n    setCountry(iso2) {\n      const iso2Lower = iso2.toLowerCase();\n      if (this.selectedCountryData.iso2 !== iso2Lower) {\n        this._setCountry(iso2Lower);\n        this._updateDialCode(this.selectedCountryData.dialCode);\n        this._triggerCountryChange();\n      }\n    }\n    //* Set the input value and update the country.\n    setNumber(number) {\n      const countryChanged = this._updateCountryFromNumber(number);\n      this._updateValFromNumber(number);\n      if (countryChanged) {\n        this._triggerCountryChange();\n      }\n    }\n    //* Set the placeholder number typ\n    setPlaceholderNumberType(type) {\n      this.options.placeholderNumberType = type;\n      this._updatePlaceholder();\n    }\n  };\n  var injectScript = (path, handleSuccess, handleFailure) => {\n    const script = document.createElement(\"script\");\n    script.onload = () => {\n      forEachInstance(\"handleUtils\");\n      if (handleSuccess) {\n        handleSuccess();\n      }\n    };\n    script.onerror = () => {\n      forEachInstance(\"rejectUtilsScriptPromise\");\n      if (handleFailure) {\n        handleFailure();\n      }\n    };\n    script.className = \"iti-load-utils\";\n    script.async = true;\n    script.src = path;\n    document.body.appendChild(script);\n  };\n  var loadUtils = (path) => {\n    if (!window.intlTelInputUtils && !window.intlTelInputGlobals.startedLoadingUtilsScript) {\n      window.intlTelInputGlobals.startedLoadingUtilsScript = true;\n      return new Promise(\n        (resolve, reject) => injectScript(path, resolve, reject)\n      );\n    }\n    return null;\n  };\n  if (typeof window === \"object\") {\n    const intlTelInputGlobals = {\n      defaults,\n      //* Using a global like this allows us to mock it in the tests.\n      documentReady: () => document.readyState === \"complete\",\n      //* Get the country data object.\n      getCountryData: () => data_default,\n      //* A getter for the plugin instance.\n      getInstance: (input) => {\n        const id2 = input.getAttribute(\"data-intl-tel-input-id\");\n        return id2 ? intlTelInputGlobals.instances[id2] : null;\n      },\n      //* A map from instance ID to instance object.\n      instances: {},\n      loadUtils,\n      version: \"21.1.4\"\n    };\n    window.intlTelInputGlobals = intlTelInputGlobals;\n  }\n  var intlTelInput = (input, options) => {\n    const iti = new Iti(input, options);\n    iti._init();\n    input.setAttribute(\"data-intl-tel-input-id\", iti.id.toString());\n    window.intlTelInputGlobals.instances[iti.id] = iti;\n    return iti;\n  };\n  var intl_tel_input_default = intlTelInput;\n  return __toCommonJS(intl_tel_input_exports);\n})();\n\n// UMD\n  return factoryOutput.default;\n}));\n","// extracted by mini-css-extract-plugin\nexport {};"],"names":[],"sourceRoot":""}