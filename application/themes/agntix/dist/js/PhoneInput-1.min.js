"use strict";
(self["webpackChunktheme"] = self["webpackChunktheme"] || []).push([["PhoneInput"],{

/***/ "./src/js/components/PhoneInput.js":
/*!*****************************************!*\
  !*** ./src/js/components/PhoneInput.js ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "default": () => (/* binding */ PhoneInput)
/* harmony export */ });
/* harmony import */ var intl_tel_input__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! intl-tel-input */ "./node_modules/intl-tel-input/build/js/intlTelInput.js");
/* harmony import */ var intl_tel_input__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(intl_tel_input__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var intl_tel_input_build_css_intlTelInput_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! intl-tel-input/build/css/intlTelInput.css */ "./node_modules/intl-tel-input/build/css/intlTelInput.css");
/* harmony import */ var _utils__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../utils */ "./src/js/utils.js");
/* provided dependency */ var $ = __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }



var PhoneInput = /*#__PURE__*/_createClass(function PhoneInput() {
  var _this = this;
  _classCallCheck(this, PhoneInput);
  _defineProperty(this, "init", function () {
    _this.phoneInputs.each(function (i, el) {
      _this.globalIti = intl_tel_input__WEBPACK_IMPORTED_MODULE_0___default()(el, {
        initialCountry: "ae",
        separateDialCode: true,
        showSelectedDialCode: true,
        preferredCountries: ["ae"]
      });

      //Add country code to hidden input field initailly
      var dialCode = _this.globalIti.getSelectedCountryData().dialCode;
      $(el).parents(".form-group").find("#" + $(el)[0].id + "-dial-code").val("+" + dialCode);

      //Add country code to hidden input field on country change
      $(el).on("countrychange", function (e) {
        var dialCode = _this.globalIti.getSelectedCountryData().dialCode;
        $(e.currentTarget).parents(".form-group").find("#" + $(el)[0].id + "-dial-code").val("+" + dialCode);
      });

      //Prevent background scroll on mobile
      if ((0,_utils__WEBPACK_IMPORTED_MODULE_2__.isMobileAndTablet)()) {
        $(el).on("open:countrydropdown", function () {
          $("body").addClass("active");
        });
        $(el).on("close:countrydropdown", function () {
          $("body").removeClass("active");
        });
      }
      $(el).on("input", function (e) {
        var input = e.target;
        var value = input.value.replace(/\D/g, ""); // Remove non-numeric characters

        // Limit the input to 15 characters
        if (value.length > 15) {
          value = value.slice(0, 15);
        }
        $(input).val(value);

        //Add phone number to hidden input field on input
        $("#" + $(input)[0].id + "-number-original").val(value);
      });
    });
  });
  this.phoneInputs = $('input[type="tel"]');
  this.globalIti = null;
  if (!this.phoneInputs.length) {
    return;
  }
  this.init();
});


/***/ })

}]);
//# sourceMappingURL=PhoneInput-1.min.js.map